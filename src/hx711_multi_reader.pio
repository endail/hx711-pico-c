; MIT License
; 
; Copyright (c) 2023 Daniel Robertson
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
; 
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

.program hx711_multi_reader

.side_set 1 opt                 ; Side set on the clock pin.

.define DATA_READY_IRQ_NUM 0
.define APP_WAIT_IRQ_NUM 1
.define READ_BITS 23            ; 24 bits to read from HX711 (this is 0-based).
.define DEFAULT_GAIN 0          ; Default gain (0=128, 1=32, 2=64).
.define T3 2                    ; 200ns
.define T4 2                    ; 200ns

set x, DEFAULT_GAIN             ; Set and grab an initial gain value.
pull noblock
mov x, osr

.wrap_target
wrap_target:

set y, READ_BITS                ; Read y number of bits. This is 0-based.

irq wait APP_WAIT_IRQ_NUM       ; Wait until application code is ready to obtain. Then
irq wait DATA_READY_IRQ_NUM     ; wait for data ready from other state machine.

                                ; At this point it is assumed all HX711 chips are
                                ; synchronised.

                                ; The procedure for reading bits is as follows:
                                ; 1. Set the clock pin high for all chips.
                                ; 2. Read in a single value comprising the bit state
                                ; of each pin.
                                ; 3. Set the clock pin low.
                                ; 4. Push the value back to the application.
                                ; 5. Repeat to obtain all 24 bits for each chip.

                                ; After pushing all 24 bits, the result is a matrix
                                ; of two's complement values:
                                ;
                                ; 0th chip, 1st chip, ... n-1 chip
                                ; ________________________________
                                ; [ 0, 1, ... n-1 ] 24th HX711 bit
                                ; [ 0, 0, ... n-1 ] 23rd HX711 bit
                                ; ...
                                ; [ 1, 1, ... n-1 ] 0th HX711 bit
                                ;
                                ; where n is the number of chips

bitloop:
    set pins, 1                 ; Set rising edge of clock pin.
PUBLIC bitloop_in_pins_bit_count:   ; Set a public label to modify the following
                                ; instruction.
    in pins, 1                  ; [REPLACE THE BIT COUNT IN THIS INSTRUCTION THROUGH C]
    set pins, 0                 ; Set clock low.
    push                        ; Push the pin bits to the RX FIFO
    jmp y-- bitloop             ; Jump back and keep reading.

                                ; Now set the gain in the same manner as the single
                                ; HX711 PIO program.

pull noblock side 1             ; Grab a gain value.
out x, 2
jmp !x wrap_target side 0
mov y, x

gainloop:
    set pins, 1 [T3 - 1]
    jmp y-- gainloop side 0 [T4 - 1]

                                ; When done, go back to the start and wait for the
                                ; application to be ready again.

.wrap

% c-sdk {
// MIT License
// 
// Copyright (c) 2023 Daniel Robertson
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <assert.h>
#include "hardware/clocks.h"
#include "hardware/pio.h"
#include "hx711_multi.h"

void hx711_multi_pio_init(hx711_multi_t* const hxm) {

    assert(hxm != NULL);
    assert(hxm->_pio != NULL);

    pio_gpio_init(
        hxm->_pio,
        hxm->clock_pin);

    for(uint i = hxm->data_pin_base; i < hxm->_chips_len; ++i) {
        pio_gpio_init(hxm->_pio, i);
    }

}

void hx711_multi_reader_program_init(hx711_multi_t* const hxm) {

    //set state machine to 10MHz clock speed
    static const uint SM_HZ = 10000000;

    assert(hxm != NULL);
    assert(hxm->_pio != NULL);

    hxm->_pio->instr_mem[hx711_multi_reader_offset_bitloop_in_pins_bit_count] = 
        pio_encode_in(pio_pins, hxm->_chips_len);

    pio_sm_config cfg = hx711_multi_reader_program_get_default_config(
        hxm->_reader_offset);

    const float div = (float)(clock_get_hz(clk_sys)) / SM_HZ;

    sm_config_set_clkdiv(
        &cfg,
        div);

    //clock pin setup
    pio_sm_set_out_pins(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->clock_pin,
        1);

    pio_sm_set_set_pins(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->clock_pin,
        1);

    pio_sm_set_consecutive_pindirs(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->clock_pin,
        1,
        true);

    sm_config_set_set_pins(
        &cfg,
        hxm->clock_pin,
        1);

    sm_config_set_out_pins(
        &cfg,
        hxm->clock_pin,
        1);

    sm_config_set_sideset_pins(
        &cfg,
        hxm->clock_pin);

    //data pins
    pio_sm_set_in_pins(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->data_pin_base);

    pio_sm_set_consecutive_pindirs(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->data_pin_base,
        hxm->_chips_len,
        true);

    sm_config_set_in_pins(
        &cfg,
        hxm->data_pin_base);

    sm_config_set_in_shift(
        &cfg,
        true,                   //true = shift in right
        false,
        HX711_MULTI_MAX_CHIPS); //"full"

    hxm->_reader_default_config = cfg;

}

%}
