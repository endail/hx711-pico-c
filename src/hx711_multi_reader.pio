; MIT License
; 
; Copyright (c) 2023 Daniel Robertson
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
; 
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

; This program functions similarly to the single HX711 reader program. However,
; it has one important difference. Because the state machine has a limited
; input buffer, it cannot store a full raw HX711 value for each possible chip.
; It must also be able to be able to read the input values of each data pin
; simultaneously and do so 24 times for each bit. The state machine must
; therefore output the pin values for each chip it reads.
; 
; The program reads each pin as a bitmask. Each bit is the current state of
; each input pin - whether it is high or low. That bitmask is pushed out of
; the state machine as a 32 bit unsigned integer where the 0th bit (the
; least significant bit) is the state of the HX711's data pin connected to
; the base data pin, the 1th bit is the second HX711, the 2th bit is the
; third HX711, and so on. This occurs 24 times. Onnce for each bit in a raw,
; two's complement HX711 value.
; 
; After the 24 bits have been pushed out of the state machine, effectively
; a 2D array of bits has been created. Each row represents the HX711 bit
; number, and each column represents the all the bits for an individual
; chip. For example:
; 
; [ 0, 1, 1, ... 0 ]    This is the MSB set of bits for each HX711.
; [ 1, 1, 0, ... 1 ]    This is the next set of bits for each HX711.
; ...
; [ 0, 0, 1, ... 0 ]    This is the LSB set of bits for each HX711.
;
; =========================================================================
; 
; The main program loop waits for an IRQ from code to be cleared before it
; begins. It will then wait for an IRQ to be set from a another state
; machine to indiciate each HX711 has data ready for retrieval. It then
; follows the standard bit reading loop and pushes each set of pin bits out
; of the state machine. This push must be blocking since, if the application
; consuming the data misses a push, it will subsequently miss a set of bits
; and lead to invalid HX711 values. After reading in the bits, the same gain
; setting procedure is followed as with a single HX711.

.program hx711_multi_reader

.define DATA_READY_IRQ_NUM          1
.define APP_WAIT_IRQ_NUM            0

.define LOW                         0
.define HIGH                        1

.define PLACEHOLDER_IN              1

.define READ_BITS                   23
.define DEFAULT_GAIN                0
.define GAIN_BITS                   32
.define T3                          2
.define T4                          2

.side_set 1 opt

set x, DEFAULT_GAIN
pull noblock
out x, GAIN_BITS

.wrap_target
wrap_target:

set y, READ_BITS

irq wait APP_WAIT_IRQ_NUM           ; Wait until application is ready to obtain
                                    ; values.

;wait HIGH irq DATA_READY_IRQ_NUM
irq wait DATA_READY_IRQ_NUM         ; Wait for the IRQ from the other state machine
                                    ; to indicate all HX711s are ready for data
                                    ; retrieval.

                                    ; At this point it is assumed all HX711 chips are
                                    ; synchronised.

bitloop:
    set pins, HIGH

PUBLIC bitloop_in_pins_bit_count:   ; Set a public label to modify the following `in pins`
                                    ; instruction.
    in pins, PLACEHOLDER_IN

    set pins, LOW

    push block                      ; Push the bitmask of pin values out of the state
                                    ; machine.

    jmp y-- bitloop

pull noblock side HIGH
out x, GAIN_BITS
jmp !x wrap_target side LOW
mov y, x

gainloop:
    set pins, HIGH [T3 - 1]
    jmp y-- gainloop side LOW [T4 - 1]

.wrap

% c-sdk {
// MIT License
// 
// Copyright (c) 2023 Daniel Robertson
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <assert.h>
#include "hardware/clocks.h"
#include "hardware/pio.h"
#include "hx711_multi.h"

void hx711_multi_pio_init(hx711_multi_t* const hxm) {

    assert(hxm != NULL);
    assert(hxm->_pio != NULL);
    assert(hxm->_chips_len > 0);

    pio_gpio_init(
        hxm->_pio,
        hxm->_clock_pin);

    {
        uint i = hxm->_data_pin_base;
        const uint l = hxm->_data_pin_base + hxm->_chips_len - 1;
        for(; i <= l; ++i) {
            pio_gpio_init(hxm->_pio, i);
        }
    }

    pio_interrupt_clear(hxm->_pio, HX711_MULTI_APP_WAIT_IRQ_NUM);
    pio_interrupt_clear(hxm->_pio, HX711_MULTI_DATA_READY_IRQ_NUM);

}

void hx711_multi_reader_program_init(hx711_multi_t* const hxm) {

    //set state machine to 10MHz clock speed
    static const uint SM_HZ = 10000000;

    assert(hxm != NULL);
    assert(hxm->_pio != NULL);

    hxm->_pio->instr_mem[hxm->_reader_offset + hx711_multi_reader_offset_bitloop_in_pins_bit_count] = 
        pio_encode_in(pio_pins, hxm->_chips_len);

    pio_sm_config cfg = hx711_multi_reader_program_get_default_config(
        hxm->_reader_offset);

    const float div = (float)(clock_get_hz(clk_sys)) / SM_HZ;

    sm_config_set_clkdiv(
        &cfg,
        div);

    //clock pin setup
    pio_sm_set_out_pins(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->_clock_pin,
        1);

    pio_sm_set_set_pins(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->_clock_pin,
        1);

    pio_sm_set_consecutive_pindirs(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->_clock_pin,
        1,
        true);

    sm_config_set_set_pins(
        &cfg,
        hxm->_clock_pin,
        1);

    sm_config_set_out_pins(
        &cfg,
        hxm->_clock_pin,
        1);

    sm_config_set_sideset_pins(
        &cfg,
        hxm->_clock_pin);

    //data pins
    pio_sm_set_in_pins(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->_data_pin_base);

    pio_sm_set_consecutive_pindirs(
        hxm->_pio,
        hxm->_reader_sm,
        hxm->_data_pin_base,
        hxm->_chips_len,
        false);         //false = input

    sm_config_set_in_pins(
        &cfg,
        hxm->_data_pin_base);

    sm_config_set_in_shift(
        &cfg,
        false,                    //false = shift in left
        false,                    //false = autopush disabled
        0);

    pio_sm_clear_fifos(
        hxm->_pio,
        hxm->_reader_sm);

    hxm->_reader_default_config = cfg;

}

%}
